@page "/note"
@page "/note/{delete:bool}/{id:int}"
@inject INoteService NoteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="css/font-awesome/css/fontawesome.min.css" />

<PageTitle>Elenco delle note</PageTitle>

<h3>Elenco note</h3>

@if(NoteService.Notes.Count == 0)
{
    <p><em>Non ci sono note, creane una!</em></p>
}
else if(NoteService.Notes.Count == 1){
    <p><em>C'è @NoteService.Notes.Count nota</em></p>
}
else{
    <p><em>Ci sono @NoteService.Notes.Count note</em></p>
}

<div id="delete">
    <div class="alert alert-@warn @visibility" role="alert" id="alert">
        Stai eliminando la nota! Vuoi <a @onclick="CancelDelete" class="alert-link" style="cursor: pointer;">ANNULLARE</a>?
        <div class="progress">
            <div class="progress-bar progress-bar-striped bg-@warn" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>
</div>

@if (nh)
{
    <div class="alert alert-warning" role="alert" id="alert">
        maaaaa... perché?!
    </div>
}

<div id="searchArea">
    <InputText class="form-control" placeholder="cerca" @bind-Value="src" @onkeypress="Search"></InputText>
    <button class="btn btn-primary"
        @onclick="(() => Search())">
        Cerca
    </button>

    <button class="btn btn-secondary"
    @onclick="(() => Reload())">
        Ripristina
    </button>
</div>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th class="sort-th" @onclick="@(() => SortTable("Title"))">
                <span class="oi @(SetSortIcon("Title"))"></span> Titolo
            </th>
            <th class="sort-th">
                Descrizione
            </th>
            <th class="d-none d-md-table-cell">Tag</th>
            <th class="d-none d-md-table-cell sort-th" @onclick="@(() => SortTable("Update"))">
                <span class="oi @(SetSortIcon("Update"))"></span> Modificato
            </th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-md-table-cell"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var note in NoteService.Notes)
        {
            <tr id="@note.Id">
                <td>
                    <button class="btn btn-primary"
                    @onclick="(() => ReadNote(note.Id))">
                        <i class="oi oi-eye"></i>
                    </button>
                </td>
                <td>@note.Title</td>
                <td>
                    @{
                        string Description = note.Description;
                        if (Description.Length > 75)
                        {
                            Description = Description.Substring(0, 75);
                        }
                    }
                    @Description
                    @if(note.Description.Length > 75)
                    {
                        <i>... <b class="readmore" @onclick="(() => ReadNote(note.Id))">(Leggi di più)</b></i>
                    }
                </td>
                <td class="d-none d-md-table-cell">@note.Tag</td>
                <td class="d-none d-md-table-cell">
                    @note.Update.ToString("d")
                </td>
                <td class="d-none d-md-table-cell">
                    <button class="btn btn-outline-info"
                        @onclick="(() => ShowNote(note.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                </td>
                <td class="d-none d-md-table-cell">
                    <button class="btn btn-danger"
                        @onclick="(() => DeleteNote(note.Id))">
                        <i class="oi oi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary"
        @onclick="CreateNewNote">
    Crea nuova nota
</button>

@code {
    [Parameter]
    public bool delete { get; set; } = false;

    [Parameter]
    public int id { get; set; }

    string? src;
    int time = 0;
    string? warn = null; //danger o warning
    string? visibility = "d-none";
    bool confirm = true;
    CancellationTokenSource cts;
    bool nh = false;

    /// <summary>
    /// prende tutte le note dal database e le inserisce nella lista NoteService
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await NoteService.GetNotes();

        if (delete)
        {
            if(await NoteService.GetNoteById(id) != null)
                await DeleteNote(id);
            else
                NavigationManager.NavigateTo($"note");
        }
    }

    /// <summary>
    /// eliminazione di una nota selezionata
    /// </summary>
    /// <param name="id">id della prova da eliminare</param>
    /// <returns></returns>
    async Task DeleteNote(int id)
    {
        visibility = "";
        warn = "danger";
        NoteService.Notes = NoteService.Notes.FindAll(n => n.Id != id);
        cts = new CancellationTokenSource();
        Task.Delay(new TimeSpan(0, 0, 5), cts.Token).ContinueWith(async o => { await ConfirmDelete(id); });
    }

    /// <summary>
    /// annulla l'eliminazione corrente
    /// </summary>
    /// <returns></returns>
    async Task CancelDelete()
    {
        confirm = false;
        cts.Cancel();
    }

    /// <summary>
    /// allo scarede del timer di DeleteNote (o all'annullamento) nasconde il messaggio e procede/annulla l'eliminazione
    /// </summary>
    /// <param name="id">id della nota da eliminare</param>
    /// <returns></returns>
    async Task ConfirmDelete(int id)
    {
        visibility = "d-none";

        if(confirm)
            await NoteService.DeleteNote(id);

        await Search();

        StateHasChanged();
        confirm = true;
    }

    /// <summary>
    /// ricarica la pagina
    /// </summary>
    /// <returns></returns>
    async Task Reload()
    {
        src = null;
        activeSortColumn = null;
        nh = false;
        await NoteService.GetNotes();
    }

    /// <summary>
    /// mostra la nota selezionata
    /// </summary>
    /// <param name="id">id della nota da modificare</param>
    void ShowNote(int id)
    {
        NavigationManager.NavigateTo($"nota/{id}");
    }

    /// <summary>
    /// legge la nota selezionata
    /// </summary>
    /// <param name="id">id della nota da leggere</param>
    void ReadNote(int id)
    {
        NavigationManager.NavigateTo($"read/{id}");
    }

    /// <summary>
    /// reindirizza alla pagina per la creazione di una nuova nota
    /// </summary>
    void CreateNewNote()
    {
        NavigationManager.NavigateTo("/nota");
    }


    private bool isSortedAscending;
    private string activeSortColumn;

    /// <summary>
    /// ordina la tabella in base ad un campo selezionato
    /// </summary>
    /// <param name="columnName">nome del campo sul quale la tabella verrà riordinata</param>
    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            NoteService.Notes = NoteService.Notes.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                NoteService.Notes = NoteService.Notes.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                NoteService.Notes = NoteService.Notes.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
    }

    /// <summary>
    /// implementa il simbolo vincino al nome della colonna di riordino
    /// </summary>
    /// <param name="columnName">nome della colonna a cui applicare l'icona</param>
    /// <returns></returns>
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "oi-caret-top";
        }
        else
        {
            return "oi-caret-bottom";
        }
    }

    /// <summary>
    /// ricerca di una determinata parola/frase all'interno della descrizione e titolo di tutte le note
    /// </summary>
    /// <returns></returns>
    async Task Search()
    {
        activeSortColumn = null;
        await NoteService.GetNotes();
        if (src != "" && src != " " && src != null)
        {
            if (src == "177013")
                nh = true;
            else
                nh = false;

            NoteService.Notes = NoteService.Notes.FindAll(n => n.Title.ToLower().Contains(src.ToLower()) || n.Description.ToLower().Contains(src.ToLower()));
        }
        else
            nh = false;
    }
}

<style>
    .readmore:hover{
        cursor: pointer;
        text-decoration: underline;
    }

    div#searchArea > button{
        margin-top: 5px;
    }

    #delete{
        position: fixed;
        min-width: 75%;
        bottom: 0;
        right: 0;
        z-index: 1;
    }

    @@keyframes decrease {
        from {
            width: 100%;
        }

        to {
            width: 0%;
        }
    }

    .progress {
        animation-name: decrease;
        animation-duration: 6s;
    }
</style>