@page "/note"
@inject INoteService NoteService
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/font-awesome/css/fontawesome.min.css" />

<PageTitle>Elenco delle note</PageTitle>

<h3>Elenco note</h3>

@if(NoteService.Notes.Count == 0)
{
    <p><em>Non ci sono note, creane una!</em></p>
}
else if(NoteService.Notes.Count == 1){
    <p><em>C'è @NoteService.Notes.Count nota</em></p>
}
else{
    <p><em>Ci sono @NoteService.Notes.Count note</em></p>
}

<InputText class="form-control" placeholder="cerca" @bind-Value="src"></InputText>
<button class="btn btn-primary" @onclick="(() => Search())">Cerca</button>

<button class="btn btn-secondary"
@onclick="(() => Reload())">
    Ripristina
</button>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th class="sort-th" @onclick="@(() => SortTable("Title"))">
                <span class="oi @(SetSortIcon("Title"))"></span> Titolo
            </th>
            <th class="sort-th">
                Descrizione
            </th>
            <th class="d-none d-md-table-cell">Tag</th>
            <th class="d-none d-md-table-cell sort-th" @onclick="@(() => SortTable("Update"))">
                <span class="oi @(SetSortIcon("Update"))"></span> Modificato
            </th>
            <th class="d-none d-md-table-cell"></th>
            <th class="d-none d-md-table-cell"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var note in NoteService.Notes)
        {
            <tr>
                <td>
                    <button class="btn btn-primary"
                    @onclick="(() => ReadNote(note.Id))">
                        <i class="oi oi-eye"></i>
                    </button>
                </td>
                <td>@note.Title</td>
                <td>
                    @{
                        string Description = note.Description;
                        if (Description.Length > 75)
                        {
                            Description = Description.Substring(0, 75);
                        }
                    }
                    @Description
                    @if(note.Description.Length > 75)
                    {
                        <i>... <b class="readmore" @onclick="(() => ReadNote(note.Id))">(Leggi di più)</b></i>
                    }
                </td>
                <td class="d-none d-md-table-cell">@note.Tag</td>
                <td class="d-none d-md-table-cell">
                    @note.Update.ToString("d")
                </td>
                <td class="d-none d-md-table-cell">
                    <button class="btn btn-outline-info"
                        @onclick="(() => ShowNote(note.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                </td>
                <td class="d-none d-md-table-cell">
                    <button class="btn btn-danger"
                        @onclick="(() => DeleteNote(note.Id))">
                        <i class="oi oi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary"
        @onclick="CreateNewNote">
    Crea nuova nota
</button>

@code {
    string? src;

    protected override async Task OnInitializedAsync()
    {
        await NoteService.GetNotes();
    }

    async Task Reload()
    {
        activeSortColumn = null;
        await NoteService.GetNotes();
    }

    void ShowNote(int id)
    {
        NavigationManager.NavigateTo($"nota/{id}");
    }

    void ReadNote(int id)
    {
        NavigationManager.NavigateTo($"read/{id}");
    }

    void CreateNewNote()
    {
        NavigationManager.NavigateTo("/nota");
    }

    async Task DeleteNote(int id)
    {
        await NoteService.DeleteNote(id);
        await NoteService.GetNotes();
    }

    private bool isSortedAscending;
    private string activeSortColumn;
    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            NoteService.Notes = NoteService.Notes.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                NoteService.Notes = NoteService.Notes.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                NoteService.Notes = NoteService.Notes.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "oi-caret-top";
        }
        else
        {
            return "oi-caret-bottom";
        }
    }

    async Task Search()
    {
        await NoteService.GetNotes();
        if(src != "" && src != " " && src != null)
            NoteService.Notes = NoteService.Notes.FindAll(n => n.Title.ToLower().Contains(src.ToLower()) || n.Description.ToLower().Contains(src.ToLower()));
    }
}

<style>
    .readmore:hover{
        cursor: pointer;
        text-decoration: underline;
    }
</style>