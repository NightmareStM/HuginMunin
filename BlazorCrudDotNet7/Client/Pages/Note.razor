@page "/nota"
@page "/nota/{id:int}"
@inject INoteService NoteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


@if (Id is null)
{
    <PageTitle>Crea una nuova Nota</PageTitle>
    <h3>Crea una nuova Nota</h3>
}
else
{
    <PageTitle>Modifica @note.Title</PageTitle>
    <h3>Modifica @note.Title</h3>
    <p>Ultima modifica: @note.Update</p>
}

<Popup @ref="popupRef" />

<EditForm Model="note" OnSubmit="HandleSubmit">
    <div>
        <label for="title">Titolo</label>
        <InputText id="title" @bind-Value="note.Title" class="form-control" placeholder="Titolo" />
    </div>
    <div>
        <label for="description">Descrizione</label>
        <InputTextArea id="description" @bind-Value="note.Description" class="form-control" placeholder="Descrizione" />
    </div>
    <div>
        <label for="tag">Tag</label>
        <InputText id="tag" @bind-Value="note.Tag" class="form-control" placeholder="Tag" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if(Id != null)
    {
        <button type="button" class="btn btn-info"
            @onclick="Undo">
            Annulla
        </button>

        <br />
    }
    <button type="button" class="btn btn-danger"
            @onclick="DeleteNote">
        @btnDel
    </button>

    @if (Id != null)
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" value="" @onchange="AdvancedOption">
            <label class="form-check-label" for="defaultCheck1">
                Opzioni avanzate
            </label>
        </div>
        @if (advancedOpt)
        {
            <div>
                <button type="button" class="btn btn-dark"
                @onclick="DuplicateNote">
                    Salva come nuova nota
                </button>
            </div>
        }
    }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    string btnDel = string.Empty;

    private Popup popupRef = new();

    private bool advancedOpt = false;

    BlazorCrudDotNet7.Shared.Note note =
        new BlazorCrudDotNet7.Shared.Note { Title = "Nuova Nota" };

    /// <summary>
    /// setta il testo del bottone per submit
    /// </summary>
    protected override void OnInitialized()
    {
        btnText = Id == null ? "Salva nuova nota" : "Aggiorna nota";
        btnDel = Id == null ? "Scarta nota" : "Elimina Nota";
    }

    /// <summary>
    /// prende la nota in base all'Id, nel caso non la trovi reindirizza alla versione della pagina per la creazione di una nuova
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await NoteService.GetNoteById((int)Id);
            if (result is not null)
                note = result;
            else
                NavigationManager.NavigateTo("/nota");
        }
    }

    /// <summary>
    /// all'invio fa un controllo e crea una nuova nota se non esisteva o aggiorna se esisteva già
    /// </summary>
    /// <returns></returns>
    async Task HandleSubmit()
    {
        if(Check())
        {
            note.Update = DateTime.Now;

            if (Id is null)
            {
                note.Create = note.Update;
                await NoteService.CreateNote(note);
            }
            else
            {
                //potrebbe dare fastidio anche sull'aggiornare
                //var dbnote = await NoteService.GetNoteById((int)Id);
                //if(dbnote.Title != note.Title || dbnote.Description != note.Description || dbnote.Tag != note.Tag)
                //{
                //    if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Sei sicuro di voler aggiornare '{note.Title}'?"))
                //        return;
                //}
                await NoteService.UpdateNote((int)Id, note);
            }
        }
    }

    /// <summary>
    /// Elimina la nota corrente
    /// </summary>
    /// <returns></returns>
    async Task DeleteNote()
    {
        if(Id is null)
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Sei sicuro di voler scartare la nota?"))
                return;
            else
                NavigationManager.NavigateTo($"/note");
        else
            NavigationManager.NavigateTo($"/note/true/{note.Id}");
    }

    /// <summary>
    /// Salva le modifiche effettuate in una nuova nota
    /// </summary>
    /// <returns></returns>
    async Task DuplicateNote()
    {
        if (Check())
        {
            BlazorCrudDotNet7.Shared.Note _note =
            new BlazorCrudDotNet7.Shared.Note { Title = note.Title, Description = note.Description, Tag = note.Tag, Update = DateTime.Now };

            await NoteService.CreateNote(_note);
        }
    }

    /// <summary>
    /// Annulla le modifice effettuate
    /// </summary>
    /// <returns></returns>
    async Task Undo()
    {
        var dbnote = await NoteService.GetNoteById((int)Id);
        if (dbnote.Title != note.Title || dbnote.Description != note.Description || dbnote.Tag != note.Tag)
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Sei sicuro di voler annullare le modifiche di '{note.Title}'?"))
                return;
        }
        NavigationManager.NavigateTo($"/read/{note.Id}");
    }

    /// <summary>
    /// Controllo di validità delle modifiche
    /// </summary>
    /// <returns>
    /// ritorna true se i campi rispettano le condizioni, falso se non le rispettano (e mostra messaggio di errore)
    /// </returns>
    bool Check()
    {
        if (note.Title == "" || note.Title == " ")
        {
            popupRef.Show("Il titolo non può essere vuoto", "Attenzione!");
        }
        else if (note.Tag.Length > 25)
        {
            popupRef.Show("Il tag può contenere MASSIMO 25 caratteri", "Attenzione!");
        }
        else if (note.Title.Length > 50)
        {
            popupRef.Show("Il titolo è preferibile di 50 o meno caratteri", "Attenzione!");
        }
        else
        {
            return true;
        }

        return false;
    }

    private void AdvancedOption(ChangeEventArgs e)
    {
        advancedOpt = !advancedOpt;
    }
}

<style>
    button{
        margin: 2px;
    }

    .form-check{
        margin-top: 10px;
    }
</style>