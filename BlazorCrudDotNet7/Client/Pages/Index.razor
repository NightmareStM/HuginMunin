@page "/"
@inject INoteService NoteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>
@*
<div>
    <h2 @onclick=@(()=>hidden=!hidden)>
        Hugin & Munin <svg version="1.0" xmlns="http://www.w3.org/2000/svg"
                           width="200" height="200" viewBox="0 0 238.000000 250.000000"
                           preserveAspectRatio="xMidYMid meet">
            <g transform="translate(0.000000,250.000000) scale(0.100000,-0.100000)"
               fill="currentColor" stroke="#8338ec" stroke-width="22">
                <path d="M1504 1820 c-33 -16 -75 -45 -93 -64 -44 -46 -39 -52 103 -123 125
                    -62 195 -110 221 -150 l18 -27 -34 23 c-86 56 -226 99 -354 108 l-80 6 -205
                    -188 c-211 -194 -251 -223 -527 -389 -89 -53 -165 -101 -168 -106 -11 -18 51
                    -68 105 -84 102 -30 96 -33 336 157 120 95 226 177 234 182 8 4 -8 -16 -36
                    -46 -28 -30 -59 -67 -69 -83 l-19 -29 64 -59 c75 -68 138 -92 269 -104 l83 -7
                    29 -46 c40 -63 35 -80 -31 -114 l-55 -28 49 5 c27 3 127 6 223 6 190 0 202 4
                    127 48 -33 19 -49 22 -106 19 l-67 -4 -57 64 c-31 35 -55 65 -53 67 2 1 56 28
                    120 59 98 47 125 65 170 116 30 32 72 94 94 138 l40 78 0 140 c0 174 -7 208
                    -43 225 -26 13 -25 14 43 25 39 7 84 17 100 24 17 6 37 14 45 17 9 3 -21 21
                    -71 43 -47 21 -106 54 -132 74 -82 62 -183 73 -273 27z m163 -66 c3 -8 1 -20
                    -5 -26 -15 -15 -43 8 -35 28 7 19 32 18 40 -2z" />
            </g>
        </svg>
    </h2>
    <h2>
        Hugin & Munin <svg version="1.0" xmlns="http://www.w3.org/2000/svg"
                           width="200" height="200" viewBox="0 0 238.000000 250.000000"
                           preserveAspectRatio="xMidYMid meet">
            <g transform="translate(0.000000,250.000000) scale(0.100000,-0.100000)"
               fill="currentColor" stroke="none">
                <path d="M1504 1820 c-33 -16 -75 -45 -93 -64 -44 -46 -39 -52 103 -123 125
                    -62 195 -110 221 -150 l18 -27 -34 23 c-86 56 -226 99 -354 108 l-80 6 -205
                    -188 c-211 -194 -251 -223 -527 -389 -89 -53 -165 -101 -168 -106 -11 -18 51
                    -68 105 -84 102 -30 96 -33 336 157 120 95 226 177 234 182 8 4 -8 -16 -36
                    -46 -28 -30 -59 -67 -69 -83 l-19 -29 64 -59 c75 -68 138 -92 269 -104 l83 -7
                    29 -46 c40 -63 35 -80 -31 -114 l-55 -28 49 5 c27 3 127 6 223 6 190 0 202 4
                    127 48 -33 19 -49 22 -106 19 l-67 -4 -57 64 c-31 35 -55 65 -53 67 2 1 56 28
                    120 59 98 47 125 65 170 116 30 32 72 94 94 138 l40 78 0 140 c0 174 -7 208
                    -43 225 -26 13 -25 14 43 25 39 7 84 17 100 24 17 6 37 14 45 17 9 3 -21 21
                    -71 43 -47 21 -106 54 -132 74 -82 62 -183 73 -273 27z m163 -66 c3 -8 1 -20
                    -5 -26 -15 -15 -43 8 -35 28 7 19 32 18 40 -2z" />
            </g>
        </svg>
    </h2>
</div>
@*<div id="text">
    <p class="fs-1 fst-italic text-muted text-center">Le note online che si adattano alle tue esigenze.</p>
</div>

@code{
    bool hidden = true;
}

@if (!hidden)
{
    <audio autoplay controls><source src="/Audio/internet.mp3" /></audio>
}
else
{
    <audio controls muted><source src="/Audio/internet.mp3" /></audio>
}*@
@*<SurveyPrompt Title="How is Blazor working for you?" />*@

@*<button class="btn btn-secondary"
@onclick="(() => Sort())">
    Ordina
</button>*@

<section>
    <h2>
        Aggiungi una nuova nota
    </h2>
    <form class="svelte-nvgjz6">
        <label class="svelte-nvgjz6">
            <span>
                Titolo
            </span>
            <input @bind="note.Title" required="" type="text" placeholder="Titolo" class="svelte-nvgjz6">
        </label>
        <label class="svelte-nvgjz6">
            <span>
                Tag
            </span>
            <input type="text" placeholder="Tag" class="svelte-nvgjz6">
        </label>
        <label class="svelte-nvgjz6">
            <span>
                Descrizione
            </span>
            <input type="text" placeholder="Descrione" class="svelte-nvgjz6">
        </label>
        <button aria-label="Create entry" aria-describedby="description" class="svelte-nvgjz6" @onclick="(() => Create())">
            <i class="oi oi-check check"></i>
        </button>
        
        @*TODO: text input per la descrizione e pulsante per confermare la creazione*@

    </form>
</section>

<Popup @ref="popupRef" />

<section>
    <h2>
        Note Recenti
    </h2>
    <main class="svelte-foxn66">
        @foreach (var note in NoteService.Notes)
        {
            <article class="svelte-foxn66" style="border-color: rebeccapurple;">
                <h2 class="svelte-foxn66">@note.Title</h2>
                <p class="svelte-foxn66">@note.Tag</p>
                <button aria-label="Delete" class="svelte-foxn66" @onclick="(() => DeleteNote(note.Id))">
                    <i class="oi oi-trash" style="color: white;"></i>
                </button>
            </article>
        }
    </main>
</section>

@code{
    BlazorCrudDotNet7.Shared.Note note =
        new BlazorCrudDotNet7.Shared.Note { Title = "Nuova Nota" };
    private Popup popupRef = new();

    protected override async Task OnInitializedAsync()
    {
        await NoteService.GetNotes();
        Sort();
    }

    private void Sort()
    {
        NoteService.Notes = NoteService.Notes.OrderByDescending(x => x.GetType().GetProperty("Update").GetValue(x, null)).Take(5).ToList(); 
    }

    /// <summary>
    /// all'invio fa un controllo e crea una nuova nota se non esisteva o aggiorna se esisteva già
    /// </summary>
    /// <returns></returns>
    async Task Create()
    {
        if (Check())
        {
            note.Update = DateTime.Now;
            note.Create = note.Update;
            await NoteService.CreateNote(note);
            await NoteService.GetNotes();
            Sort();

            note = new BlazorCrudDotNet7.Shared.Note { Title = "Nuova Nota" };
        }
    }

    /// <summary>
    /// Elimina la nota elezionata
    /// </summary>
    /// <returns></returns>
    async Task DeleteNote(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Sei sicuro di voler eliminare la nota?"))
            return;
        else
        {
            await NoteService.DeleteNote(id);
            await NoteService.GetNotes();
        }
    }

    /// <summary>
    /// Controllo di validità delle modifiche
    /// </summary>
    /// <returns>
    /// ritorna true se i campi rispettano le condizioni, falso se non le rispettano (e mostra messaggio di errore)
    /// </returns>
    bool Check()
    {
        if (note.Title == "" || note.Title == " ")
        {
            popupRef.Show("Il titolo non può essere vuoto", "Attenzione!");
        }
        else if (note.Tag.Length > 25)
        {
            popupRef.Show("Il tag può contenere MASSIMO 25 caratteri", "Attenzione!");
        }
        else if (note.Title.Length > 50)
        {
            popupRef.Show("Il titolo è preferibile di 50 o meno caratteri", "Attenzione!");
        }
        else
        {
            return true;
        }

        return false;
    }
}